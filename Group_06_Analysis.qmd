---
title: "Group_06"
author: "Analysis of IMDB data set"
number-sections: true
format: 
  html:
    embed-resources: true
    code-tools: true
  pdf:
    geometry: "left=2cm, right=2cm, top=2cm, bottom=2cm"
editor_options: 
  chunk_output_type: console
execute:
  echo: false
  eval: true
  warning: false
  message: false
---

```{r}
#| label: libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(gt)
library(patchwork)
library(gridExtra)
library(moderndive)
library(MASS)
library(knitr)
library(GGally)
library(skimr)
library(ggpubr)
```

# Introduction {#sec-Intro}

The study aims to investigate the relationship between various film attributes and IMDB ratings, drawing data from the IMDB film database allocated. The data set comprises of the factors such as film ID, release year, duration, budget, votes, genre, and IMDB rating. The research question focuses on examining the factors that impact IMDB ratings, particularly whether specific film properties contribute to ratings greater than seven. A Generalized Linear Model (GLM) analysis is conducted to derive the relationships between these properties and IMDB ratings.

```{r}
# Import the data sets
imdb_data <- read.csv("dataset06.csv")

```

# Data Wrangling Methods {#sec-DW}

Before we begin the analysis of our data, let's transform the data using various tools. The process below describes the detailed data wrangling techniques that are used to get the desired data set. After having a glimpse of the data set, the 'genre' column is converted to a type factor type.

```{r}
imdb_data$genre <- as.factor(imdb_data$genre) #column converted from character type to factor type
```

A check for missing values is conducted and it is found that 103 observations are missing from the column 'length'. Missing values are imputed with the median since median is a robust measure, less impacted by outliers as much as mean. The function *median( )* reveals the median to be 90 minutes. However, it is observed in @tbl-median-length that the median lengths vary across the different genres. With this information, the missing lengths of films are replaced by median length of the respective genre.

```{r}
#| label: tbl-median-length
#| tbl-cap: Median length by genre.
# Check for missing values
missing_values <- colSums(is.na(imdb_data)) # 103 values are missing from the column length

median_length <- median(imdb_data$length, na.rm = TRUE) # median is 90 minutes

median_length_by_genre <- imdb_data %>%
  group_by(genre) %>% 
  summarize(median_length = median(length, na.rm = TRUE))

kable(median_length_by_genre, caption = "Median Length by Genre")

for (i in 1:nrow(median_length_by_genre)) {
  genre <- median_length_by_genre$genre[i]
  median_length <- median_length_by_genre$median_length[i]
  imdb_data$length[imdb_data$genre == genre & is.na(imdb_data$length)] <- median_length
}
```

As per the research question, a new column 'high_rating' containing binary variables coressponding to 'rating' values is created. This column takes a value of 1 for IMDB ratings greater than or equal to seven and 0 for IMDB ratings less than seven. Additionally, another categorical variable 'rate' conveying the same is also added.

```{r}
#new binary column#
imdb_data$high_rating <- ifelse(imdb_data$rating >= 7, 1, 0)
<<<<<<< Updated upstream
=======
imdb_data$high_rating <- factor(imdb_data$high_rating, levels = c(0, 1)) #column converted from character type to factor type
>>>>>>> Stashed changes

#Add a categorical variable as a column
imdb_data$rate<- ifelse(imdb_data$rating >= 7, "Rating greater than 7", "Rating less than 7")
<<<<<<< Updated upstream
=======
imdb_data$rate <- factor(imdb_data$rate) #column converted from character type to factor type
>>>>>>> Stashed changes
```

# Exploratory Data Analysis {#sec-EDA}

## View the data

The data set has 1937 rows and 9 columns, 7 of which are from the original data.

```{r}
# check on the size of a data set
<<<<<<< Updated upstream
a<-dim(imdb_data)
=======
dim <- dim(imdb_data)
>>>>>>> Stashed changes
```

Let's have a look at the first five rows of the data frame.

```{r}
#| label: tbl-glimpse-dataset
#| tbl-cap: Glimpse of the first five rows in the IMDB data set.
imdb_data |>
  slice_head(n=5) |>
  gt()
```

The variables in @tbl-glimpse-dataset

-   **film.id** : The unique identifier for the film

-   **year** : Year of release of the film in cinemas

-   **length** : Duration (in minutes)

-   **budget** : Budget for the films production (in \$1000000s)

-   **votes** : Number of positive votes received by viewers

-   **genre** : Genre of the film

-   **rating** : IMDB rating from 0 to 10

-   **high_rating** : 1 for IMDB ratings greater than or equal to seven and 0 for IMDB ratings less than 7

-   **rate** : 'Rating greater than 7' got high_rating = 1 and 'Rating less than 7' for high_rating = 0

## Summary Statistics {#sec-sum}

```{r}
#| label: tbl-summary-statistics
#| tbl-cap: Summary statistics on the IMDB data by variables.
summary_year <- imdb_data %>%
  summarise('Variables'="year",
            'Mean' = mean(year),
            'Median' = median(year),
            'St.Dev' = sd(year),
            'Min' = min(year),
            'Max' = max(year),
            'IQR' = quantile(year,0.75)-quantile(year,0.25),
            'Sample_size' = n())
summary_length <- imdb_data %>%
  summarise('Variables'="length",
            'Mean' = mean(length),
            'Median' = median(length),
            'St.Dev' = sd(length),
            'Min' = min(length),
            'Max' = max(length),
            'IQR' = quantile(length,0.75)-quantile(length,0.25),
            'Sample_size' = n())
summary_budget <- imdb_data %>%
  summarise('Variables'="budget",
            'Mean' = mean(budget),
            'Median' = median(budget),
            'St.Dev' = sd(budget),
            'Min' = min(budget),
            'Max' = max(budget),
            'IQR' = quantile(budget,0.75)-quantile(budget,0.25),
            'Sample_size' = n())
summary_votes <- imdb_data %>%
  summarise('Variables'="votes",
            'Mean' = mean(votes),
            'Median' = median(votes),
            'St.Dev' = sd(votes),
            'Min' = min(votes),
            'Max' = max(votes),
            'IQR' = quantile(votes,0.75)-quantile(votes,0.25),
            'Sample_size' = n())
summary_rating <- imdb_data %>%
  summarise('Variables'="rating",
            'Mean' = mean(rating),
            'Median' = median(rating),
            'St.Dev' = sd(rating),
            'Min' = min(rating),
            'Max' = max(rating),
            'IQR' = quantile(rating,0.75)-quantile(rating,0.25),
            'Sample_size' = n())

combined_summary <- bind_rows(summary_year, summary_length, summary_budget, summary_votes, summary_rating)
combined_summary |>
  gt() |>
  fmt_number(decimals=2) |>
  cols_label(
    Variables=html("Variables"),
    Mean = html("Mean"),
    Median = html("Median"),
    St.Dev = html("Std. Dev"),
    Min = html("Min"),
    Max = html("Max"),
    IQR = html("IQR"),
    Sample_size = html("Sample Size")
  ) 
```

The @tbl-summary-statistics shows that the summary for the columns year, length, budget, votes and rating.

• For the variable year, the years of the films ranges from 1896 to 2005.

• For the variable length, the films runs from 1 minute to 316 minutes.The median for length of films is 90 minutes.

• For variable budget, the budget of films is from 3.2 (\$1000000s) to 21.2 (\$1000000s).The median budget of a film is 12(\$1000000s).

• For variable votes, the votes of films ranges from 5 to 103,854 which suggests large variation. It can be observed the IQR is relatively large as well.

## Correlation {#sec-cor}

```{r}
#| label: fig-scatterplot-matrix
#| fig-cap: Scatterplot matrix between rating and explanatory variables.
#| fig-align: center
#| fig-width: 7
#| fig-height: 6
#| message: false
scatterplot_matrix <- ggpairs(imdb_data[, c("rating","year", "budget",  "length", "votes")], 
                              title="Scatterplot matrix")
scatterplot_matrix
```

The @fig-scatterplot-matrix shows weak correlation between the variables.

## Visualization {#sec-viz}

### Histograms

```{r}
#| label: fig-histograms
#| fig-cap: Histograms of statistical distribution for varibles
#| fig-align: center
#| fig-height: 7
#| fig-width: 6
#| message: false

rating_plot <- ggplot(data=imdb_data, mapping=aes(x=rating))+
  geom_histogram(color = "black",fill="skyblue")+
  labs(x = "Rating", y = "Count")+
  theme_bw()

year_plot <- ggplot(data=imdb_data, mapping=aes(x=year))+
  geom_histogram(color = "black",fill="skyblue")+
  labs(x = "Year", y = "Count")+
  theme_bw()

length_plot <- ggplot(data=imdb_data, mapping=aes(x=length))+
  geom_histogram(color = "black",fill="skyblue")+
  labs(x = "Length", y = "Count")+
  theme_bw()

budget_plot <- ggplot(data=imdb_data, mapping=aes(x=budget))+
  geom_histogram(color = "black",fill="skyblue")+
  labs(x = "Budget", y = "Count")+
  theme_bw()

votes_plot <- ggplot(data=imdb_data, mapping=aes(x=votes))+
  geom_histogram(color = "black",fill="skyblue")+
  labs(x = "Votes", y = "Count")+
  theme_bw()

log_votes_plot <- ggplot(data=imdb_data, mapping=aes(x=log(votes)))+
  geom_histogram(color = "black",fill="skyblue")+
  labs(x = "Votes(log)", y = "Count")+
  theme_bw()

grid.arrange(rating_plot,year_plot,budget_plot,length_plot,votes_plot, log_votes_plot, ncol=2)
```

The @fig-histograms shows that the data structures follow exponential distributions. The variable 'votes' displays skewness due to large difference in values of maximum and minimum values. To reduce this skewness and facilitate more robust analysis, a logarithmic transformation is used. \clearpage

```{r}
#Add a new column#
imdb_data <- imdb_data %>%
  mutate(log_votes = log(votes))
```

### Scatterplot for rating vs explanatory variables

Scatterplot to understand the relationship between rating and four variables(year,length,budget,log_votes)

```{r}
#| label: fig-scatterplots-relationship
#| fig-cap: Scatterplots between rating and four explanatory variables. 
#| fig-align: center
#| fig-height: 5
#| message: false
s1 <- ggplot(data=imdb_data, aes(x = year, y = rating, color = rate))+
  geom_point(size=0.5)+
  labs(x = "Year", y = "Rating")+
  theme_bw()

s2 <- ggplot(data=imdb_data, aes(x = length, y = rating, color = rate))+
  geom_point(size=0.5)+
  labs(x = "Length", y = "Rating")+
  theme_bw()

s3 <- ggplot(data=imdb_data, aes(x = budget, y = rating, color = rate))+
  geom_point(size=0.5)+
  labs(x = "Budget", y = "Rating")+
  theme_bw()

s4 <- ggplot(data=imdb_data, aes(x = log_votes , y = rating, color = rate))+
  geom_point(size=0.5)+
  labs(x = "Votes(log)", y = "Rating")+
  theme_bw()

# ggarrange(s1,s2,s3,s4,ncol = 2, nrow=2, common.legend = T, legend = "bottom")

grid.arrange(s1,s2,s3,s4,ncol = 2)
```

The @fig-scatterplots-relationship suggests that there seems to be no linear relationship between the response variable and the explanatory variables which justifies the weak correlation observed earlier.

### Boxplot for genre

```{r}
#| label: fig-boxplot-ratings
#| fig-cap: Boxplot of ratings by genre.
#| fig-align: center
#| fig-width: 6
#| message: false
ggplot(data =imdb_data, mapping = aes(x = genre, y = rating)) +
  geom_boxplot(fill="skyblue")+
  labs(x = "Genre", y = "Rating")+
  theme_bw()
```

The @fig-boxplot-ratings distribution of rating genre wise. Outliers for ratings can be seen for the genre's Action, Documentary, Drama and Romance.

## The relationship response and explanatory variable

### Variable 1: Length

```{r}
#| label: fig-boxplot-length
#| fig-cap: Boxplot of length by rating.
#| fig-width: 4
#| fig-align: center
#| message: false

#boxplot
ggplot(data = imdb_data, aes(x = rate, y = length,fill=rate) )+
  geom_boxplot() +
  theme_bw()+
  labs(x = "Rating", y = "Length")+
  theme(legend.position = "none") 

length_outliers <- imdb_data %>%
group_by(rate) %>%
  mutate(is_outlier = length > quantile(length, 0.75) + 1.5 * IQR(length) |
           length < quantile(length, 0.25) - 1.5 * IQR(length)) %>%
  filter(is_outlier) %>%
  ungroup() # 97 outliers
```

@fig-boxplot-length shows that the median film length of films with 'Rating greater than 7' is less than that of 'Rating less than 7' films. It can be observed IQR of 'Rating less than 7' is smaller but has many outliers.

```{r}
#| label: tbl-summary-length
#| tbl-cap: Summary statistics on length by rating.
#| tbl-colwidths: [60,40]
table=imdb_data %>%
  group_by(rate) %>%
  summarise('Mean' = mean(length),
            'Median' = median(length),
            'St.Dev' = sd(length),
            'Min' = min(length),
            'Max' = max(length),
            'IQR' = quantile(length,0.75)-quantile(length,0.25),
            'Sample_size' = n())
table|>
  gt() |>
  fmt_number(decimals=2) |>
  cols_label(
    rate=html("rate"),
    Mean = html("Mean"),
    Median = html("Median"),
    St.Dev = html("St.Dev"),
    Min = html("Min"),
    Max = html("Max"),
    IQR = html("IQR"),
    Sample_size = html("Sample Size")
  )
```

The @tbl-summary-length The median length film with 'Rating greater than 7' is (73 minutes) lower than that with 'Rating less than 7' (95.74 minutes).

### Variable 2 : budget

```{r}
#| label: fig-boxplot-budget
#| fig-cap: Boxplot of budget by rating.
#| fig-width: 4
#| fig-align: center
#| message: false
#boxplot
ggplot(data = imdb_data, aes(x = rate, y = budget,fill=rate) )+
  geom_boxplot() +
  labs(x="Rating", y = "Budget")+
  theme_bw()+
  theme(legend.position = "none") 

budget_outliers <- imdb_data %>%
group_by(rate) %>%
  mutate(is_outlier = budget > quantile(budget, 0.75) + 1.5 * IQR(budget) |
           budget < quantile(budget, 0.25) - 1.5 * IQR(budget)) %>%
  filter(is_outlier) %>%
  ungroup() #9 outliers
```

@fig-boxplot-budget shows that the median budget film of 'Rating greater than 7' is slightly higher than that of 'Rating less than 7' films. There are 9 outliers.

```{r}
#| label: tbl-summary-budget
#| tbl-cap: Summary statistics on budget by rating.
table=imdb_data %>%
  group_by(rate) %>%
  summarise('Mean' = mean(budget),
            'Median' = median(budget),
            'St.Dev' = sd(budget),
            'Min' = min(budget),
            'Max' = max(budget),
            'IQR' = quantile(budget,0.75)-quantile(budget,0.25),
            'Sample_size' = n())

table|>
  gt() |>
  fmt_number(decimals=2) |>
  cols_label(
    Median = html("Median"),
    St.Dev = html("Std. Dev"),
    Min = html("Min"),
    Max = html("Max"),
    IQR = html("IQR"),
    Sample_size = html("Sample Size")
  )
```

The @tbl-summary-budget shows that the mean and median for 'Rating greater than 7' is almost equal. Similarly, it can be observed for and 'Rating less than 7' as well. This suggests a normal distribution. The variability is also equivalent for the 2 categories.

### Variable 3 : log_votes

```{r}
#| label: fig-boxplot-logvotes
#| fig-cap: Boxplot of log_votes by rating.
#| fig-width: 4
#| fig-align: center
#| message: false
ggplot(data = imdb_data, aes(x = rate, y = log_votes,fill=rate) )+
  geom_boxplot() +
  labs(x = "Rating", y = "Votes(log)")+
  theme_bw()+
  theme(legend.position = "none")

log_votes_outliers <- imdb_data %>%
  group_by(rate) %>%
  mutate(is_outlier = log_votes > quantile(log_votes, 0.75) + 1.5 * IQR(log_votes) |
           log_votes < quantile(log_votes, 0.25) - 1.5 * IQR(log_votes)) %>%
  filter(is_outlier) %>%
  ungroup() # 59 Outliers
```

@fig-boxplot-logvotes shows that the median log_votes film of 'Rating greater than 7' films is lower than that of 'Rating less than 7' films.

```{r}
#| label: tbl-summary-logvotes
#| tbl-cap: Summary statistics of votes(log) by rating.
table=imdb_data %>%
  group_by(rate) %>%
  summarise('Mean' = mean(log_votes),
            'Median' = median(log_votes),
            'St.Dev' = sd(log_votes),
            'Min' = min(log_votes),
            'Max' = max(log_votes),
            'IQR' = quantile(log_votes,0.75)-quantile(log_votes,0.25),
            'Sample_size' = n())

table|>
  gt() |>
  fmt_number(decimals=2) |>
  cols_label(
    Mean = html("Mean"),
    Median = html("Median"),
    St.Dev = html("Std. Dev"),
    Min = html("Min"),
    Max = html("Max"),
    IQR = html("IQR"),
    Sample_size = html("Sample Size")
  )
```

The @tbl-summary-logvotes shows that the mean and median for 'Rating greater than 7' is almost equal.

### Variable 4 : genre

The ratio of ratings above 7 to ratings below 7 and sample sizes for each type

```{r}
#| label: tbl-7
#| tbl-cap: Summary statistics of genre
library(janitor)

data_1=imdb_data %>%
        group_by(genre)%>%
        count()
colnames(data_1)=c("genre","genre_sum_count")
genre_form=imdb_data %>% 
  tabyl(genre, rate) %>% 
  adorn_percentages() %>% 
  adorn_pct_formatting() %>%
  adorn_ns()%>%
  mutate(genre_sum_count=as.matrix(data_1[2]))
genre_form|>
  gt()
```

It can be seen the size for the genre 'Romance' is only 20, which is comparatively small. We observe the following:

-   Animation, Documentary, Short - have more films with 'Rating greater than 7'

-   Action, Drama, Romance  - have more films with 'Rating less than 7'

-   Comedy - films with 'Rating greater than 7' are moderately higher than 'Rating less than 7'

```{r}
#| label: fig-dodgedbarplot-genre
#| fig-cap: Dodged barplot of genre by rating.
#| fig-width: 6
#| fig-align: center
#| message: false
ggplot(imdb_data, aes(x = genre, fill = rate)) +
   geom_bar(position = "dodge", stat = "count")+
   labs(x = "Genre", y = "Count")+
  theme_bw()+
  theme(legend.position = "bottom") 
```

The @fig-dodgedbarplot-genre supports the table above.

# Formal Data Analysis {#sec-Formal}

<<<<<<< Updated upstream
## Generalised Linear Model fit
=======
## Fitting the Model {#sec-fm}

### Saturated Model {#sec-sat.model}

Include latex equation

```{r}
#| label: tbl-6
#| tbl-cap: Summary for Saturated Model
saturated_glm_model <- glm(high_rating~ year + length + budget + log_votes + genre, 
                 data = imdb_data, family = binomial(link="logit"))
summary(saturated_glm_model)

saturated_coefficients <- summary(saturated_glm_model)$coefficients

saturated_coefficients_df <- as.data.frame(saturated_coefficients) # Create a data frame

saturated_coefficients_df$row_names <- rownames(saturated_coefficients_df)

saturated_coefficients_table <- saturated_coefficients_df %>%
  gt(rowname_col = "row_names") %>%
  fmt_number(decimals=3) %>%
  tab_header(
    title = "Summary for Saturated Model"
  )

# Print the table
print(saturated_coefficients_table)

```

Baseline category for explanatory variable 'genre' is "Action".

Wald Statistic z : p-value of log_votes is greater that 0.05

We can look what happens to the residual deviance as we add each term by using anova(saturated_glm_model)

```{r}
anova(saturated_glm_model)
```

It can be observed that largest reduction in residual deviance comes when adding 'genre' and the smallest when adding 'year' and 'log_votes'. We could try a model without 'year' and 'log_votes' as the resulting reduction in deviance is smaller than 95th percentile.

### Model 1 {#sec-m1.model}

Insert Latex Equation

```{r}
m1_glm_model <- glm(high_rating ~ length + budget + log_votes + genre, 
                 data = imdb_data, family = binomial(link="logit"))

m1_coefficients <- summary(m1_glm_model)$coefficients

m1_coefficients_df <- as.data.frame(m1_coefficients) # Create a data frame

m1_coefficients_df$row_names <- rownames(m1_coefficients_df)

m1_coefficients_table <- m1_coefficients_df %>%
  gt(rowname_col = "row_names") %>%
  fmt_number(decimals=3) %>%
  tab_header(
    title = "Summary for Model 1"
  )

# Print the table
print(m1_coefficients_table)

```

Stepwise model selection

```{r}
step_model_m1 <- step(m1_glm_model)
```

### Model 2 {#sec-m2.model}

Insert Latex Equation

```{r}
m2_glm_model <- glm(high_rating ~ length + budget + genre, 
                 data = imdb_data, family = binomial(link="logit"))
summ(m2_glm_model)

m2_coefficients <- summary(m2_glm_model)$coefficients

m2_coefficients_df <- as.data.frame(m2_coefficients) # Create a data frame

m2_coefficients_df$row_names <- rownames(m2_coefficients_df)

m2_coefficients_table <- m2_coefficients_df %>%
  gt(rowname_col = "row_names") %>%
  fmt_number(decimals=3) %>%
  tab_header(
    title = "Summary for Model 2"
  )

# Print the table
print(m2_coefficients_table)

```

Baseline category for our binary response high_rating is 0

```{r}
levels(imdb_data$high_rating)
# [1] "0" "1"
```

Log-odds

```{r}
m2.coef <- round(coef(m2_glm_model), 3)
```

95% confidence interval for these log-odds

```{r}
m2.logodds <- confint(m2_glm_model) %>%
  kable()
```

Plot

```{r}
m2_plot_logodds <- plot_model(m2_glm_model, show.values = TRUE, transform = NULL,
           title = "Log-Odds (Rating greater than 7)", show.p = FALSE)
```

Adding estimates of the log-odds to our data set

```{r}
imdb_data <- imdb_data %>%
  mutate(logodds.1=predict(m2_glm_model))
```

Odds

```{r}
m2.odds <- m2_glm_model %>%
  coef() %>%
  exp() 
```

95% Confidence Interval for odds

```{r}
m2_log_odds_interval <- confint(m2_glm_model)
m2_odds_interval <- exp(m2_log_odds_interval) %>%
  kable()
```

Plot

```{r}
m2_plot_odds <-plot_model(m2_glm_model, show.values = TRUE, axis.lim = c(1,1.5),
           title = "Odds", show.p = FALSE)
```

Adding the estimates of the odds to our data set

```{r}
imdb_data <- imdb_data %>%
  mutate(odds.1=exp(logodds.1))
```

Probabilities add the probabilities to our data, which is done using the fitted() function:

```{r}
imdb_data <- imdb_data %>%
  mutate(probs.1=fitted(m2_glm_model))
```

Plot the Probability being Rating greater than 7

```{r}
plot_model(m2_glm_model, type = "pred", terms = c("length", "budget", "genre"), show.values = TRUE)
```

## Model Checking and Diagnostics (#Sec-mcd)

### Model Selection {#Sec-ms}

```{r}
saturated_glm_model <- glm(high_rating ~ year + length + budget + log_votes + genre, 
                           data = imdb_data, family = binomial(link = "logit"))
m1_glm_model <- glm(high_rating ~ length + budget + log_votes + genre, 
                    data = imdb_data, family = binomial(link = "logit"))
m2_glm_model <- glm(high_rating ~ length + budget + genre, 
                    data = imdb_data, family = binomial(link = "logit"))
```

```{r}
# 1. Likelihood Ratio Chi-Squared Statistic Test
lr_test_m1 <- anova(saturated_glm_model, m1_glm_model, test = "Chisq")
lr_test_m2 <- anova(saturated_glm_model, m2_glm_model, test = "Chisq")

# 2. AIC
aic_values <- AIC(saturated_glm_model, m1_glm_model, m2_glm_model)

# 3. BIC
bic_values <- BIC(saturated_glm_model, m1_glm_model, m2_glm_model)


```

```{r}
# 4. Residuals (e.g., deviance residuals)
# Saturated Model
dres.sat <- resid(saturated_glm_model, type="deviance") # Deviance Residuals
pres.sat <- resid(saturated_glm_model, type="pearson") #Pearson Residuals
pred.sat <- predict(saturated_glm_model, type="response") #Fitted probabilities
d.sat <- data.frame (pred.sat=pred.sat, dres.sat=dres.sat, pres.sat=pres.sat)

g1 <- ggplot(d.sat, aes(x=pred.sat, y=dres.sat))+
  geom_point()

# Model 1
dres.m1 <- resid(m1_glm_model, type="deviance") # Deviance Residuals
pres.m1 <- resid(m1_glm_model, type="pearson") #Pearson Residuals
pred.m1 <- predict(m1_glm_model, type="response") #Fitted probabilities
d.m1 <- data.frame (pred.m1=pred.m1, dres.m1=dres.m1, pres.m1=pres.m1)

g2 <- ggplot(d.m1, aes(x=pred.m1, y=dres.m1))+
  geom_point()

# Model 2
dres.m2 <- resid(m2_glm_model, type="deviance") # Deviance Residuals
pres.m2 <- resid(m2_glm_model, type="pearson") #Pearson Residuals
pred.m2 <- predict(m2_glm_model, type="response") #Fitted probabilities
d.m2 <- data.frame (ppred.m2=pred.m2, dres.m2=dres.m2, pres.m2=pres.m2)

g3 <- ggplot(d.m2, aes(x=pred.m2, y=dres.m2))+
  geom_point()

```

```{r}
# ROC #

```
>>>>>>> Stashed changes

```{r}
# Use GLS model to fit data with all explanatory variables
mod_0 <- glm(high_rating ~ year + length + budget + log_votes + genre, data = imdb_data, family = binomial(link = "logit"))

mod_0 %>%
  summary()

```

Intercept: The intercept term of the model, the log odds when all explanatory variables are zero. year: the log odds increase by about 0.009098 for each additional year, meaning that more recent films have a slightly higher chance of being rated higher than 7 compared to older films. length: For every additional minute, the log odds decrease by about 0.063815, meaning that longer films are less likely to be rated higher than 7. budget: for every one million budget increase, the log odds increase by about 0.512148, indicating that films with higher budgets are more likely to rate higher than 7. log_votes: The natural logarithm of the number of votes increases by about 0.003142 per unit, but this is not significant. genreAnimation: Animated films are less likely to receive high ratings than action films, but the difference is not statistically significant. genreComedy: Comedy films are significantly more likely to receive high ratings compared to action films. genreDocumentary: Documentaries are significantly more likely to be rated highly than action films. genreDrama: Dramas are significantly less likely to be rated highly than action films, and the difference is statistically significant. genreRomance: Romance films are significantly less likely to be rated highly than action films, but the difference is not statistically significant. genreShort: Short films are significantly more likely to receive high ratings compared to action films. \## Model Selection

```{r}
# Backward stepping stepwise regression using AIC
step_model <- step(mod_0, direction="both", trace=FALSE)
summary(step_model)
```

# Conclusions {#sec-Conc}
