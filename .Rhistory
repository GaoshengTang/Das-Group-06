#| label: libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(gt)
library(patchwork)
library(gridExtra)
library(moderndive)
library(MASS)
library(knitr)
library(GGally)
library(skimr)
library(ggpubr)
# Import the data sets
imdb_data <- read.csv("dataset06.csv")
imdb_data$genre <- as.factor(imdb_data$genre) # genre column converted from character type to factor type
#| label: tbl-median-length
#| tbl-cap: Median length by genre.
# Check for missing values
missing_values <- colSums(is.na(imdb_data)) # 103 values are missing from the column length
median_length <- median(imdb_data$length, na.rm = TRUE) # median is 90 minutes
median_length_by_genre <- imdb_data %>%
group_by(genre) %>%
summarize(median_length = median(length, na.rm = TRUE))
kable(median_length_by_genre, caption = "Median Length by Genre")
for (i in 1:nrow(median_length_by_genre)) {
genre <- median_length_by_genre$genre[i]
median_length <- median_length_by_genre$median_length[i]
imdb_data$length[imdb_data$genre == genre & is.na(imdb_data$length)] <- median_length
}
#new binary column#
imdb_data$high_rating <- ifelse(imdb_data$rating >= 7, 1, 0)
imdb_data$high_rating <- factor(imdb_data$high_rating, levels = c(0, 1))
#Add a categorcial variable as a column
imdb_data$rate<- ifelse(imdb_data$rating >= 7, "Rating greater than 7", "Rating less than 7")
imdb_data$rate <- factor(imdb_data$rate)
# check on the size of a data set
dim(imdb_data)
#| label: tbl-glimpse-dataset
#| tbl-cap: Glimpse of the first five rows in the IMDB data set.
imdb_data |>
slice_head(n=5) |>
gt()
#| label: tbl-summary-statistics
#| tbl-cap: Summary statistics on the IMDB data by variables.
summary_year <- imdb_data %>%
summarise('Variables'="year",
'Mean' = mean(year),
'Median' = median(year),
'St.Dev' = sd(year),
'Min' = min(year),
'Max' = max(year),
'IQR' = quantile(year,0.75)-quantile(year,0.25),
'Sample_size' = n())
summary_length <- imdb_data %>%
summarise('Variables'="length",
'Mean' = mean(length),
'Median' = median(length),
'St.Dev' = sd(length),
'Min' = min(length),
'Max' = max(length),
'IQR' = quantile(length,0.75)-quantile(length,0.25),
'Sample_size' = n())
summary_budget <- imdb_data %>%
summarise('Variables'="budget",
'Mean' = mean(budget),
'Median' = median(budget),
'St.Dev' = sd(budget),
'Min' = min(budget),
'Max' = max(budget),
'IQR' = quantile(budget,0.75)-quantile(budget,0.25),
'Sample_size' = n())
summary_votes <- imdb_data %>%
summarise('Variables'="votes",
'Mean' = mean(votes),
'Median' = median(votes),
'St.Dev' = sd(votes),
'Min' = min(votes),
'Max' = max(votes),
'IQR' = quantile(votes,0.75)-quantile(votes,0.25),
'Sample_size' = n())
summary_rating <- imdb_data %>%
summarise('Variables'="rating",
'Mean' = mean(rating),
'Median' = median(rating),
'St.Dev' = sd(rating),
'Min' = min(rating),
'Max' = max(rating),
'IQR' = quantile(rating,0.75)-quantile(rating,0.25),
'Sample_size' = n())
combined_summary <- bind_rows(summary_year, summary_length, summary_budget, summary_votes, summary_rating)
combined_summary |>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Variables=html("Variables"),
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
#| label: fig-scatterplot-matrix
#| fig-cap: Scatterplot matrix between rating and explanatory variables.
#| fig-align: center
#| fig-width: 7
#| fig-height: 6
#| message: false
scatterplot_matrix <- ggpairs(imdb_data[, c("rating","year", "budget",  "length", "votes")],
title="Scatterplot matrix")
scatterplot_matrix
#| label: fig-histograms
#| fig-cap: Histograms of statistical distribution for varibles
#| fig-align: center
#| fig-height: 7
#| fig-width: 6
#| message: false
rating_plot <- ggplot(data=imdb_data, mapping=aes(x=rating))+
geom_histogram(color = "black",fill="skyblue")+
labs(x = "Rating", y = "Count")+
theme_bw()
year_plot <- ggplot(data=imdb_data, mapping=aes(x=year))+
geom_histogram(color = "black",fill="skyblue")+
labs(x = "Year", y = "Count")+
theme_bw()
length_plot <- ggplot(data=imdb_data, mapping=aes(x=length))+
geom_histogram(color = "black",fill="skyblue")+
labs(x = "Length", y = "Count")+
theme_bw()
budget_plot <- ggplot(data=imdb_data, mapping=aes(x=budget))+
geom_histogram(color = "black",fill="skyblue")+
labs(x = "Budget", y = "Count")+
theme_bw()
votes_plot <- ggplot(data=imdb_data, mapping=aes(x=votes))+
geom_histogram(color = "black",fill="skyblue")+
labs(x = "Votes", y = "Count")+
theme_bw()
log_votes_plot <- ggplot(data=imdb_data, mapping=aes(x=log(votes)))+
geom_histogram(color = "black",fill="skyblue")+
labs(x = "Votes(log)", y = "Count")+
theme_bw()
grid.arrange(rating_plot,year_plot,budget_plot,length_plot,votes_plot, log_votes_plot, ncol=2)
#Add a new column#
imdb_data <- imdb_data %>%
mutate(log_votes = log(votes))
#| label: fig-stacked-barplot
#| fig-cap: Stacked barplot of statistical distribution for ratings by genre.
#| fig-align: center
#| fig-width: 6
#| message: false
ggplot(imdb_data, aes(x = genre, fill = rate)) +
geom_bar(stat = "count") +
labs(x = "Genre", y = "Count")+
theme_bw()+
theme(legend.position = "bottom")
#| label: fig-stacked-barplot
#| fig-cap: Stacked barplot of statistical distribution for ratings by genre.
#| fig-align: center
#| fig-width: 6
#| message: false
ggplot(imdb_data, aes(x = genre, fill = rate)) +
geom_bar(stat = "count") +
labs(x = "Genre", y = "Count")+
theme_bw()+
theme(legend.position = "bottom")
#| label: fig-scatterplots-relationship
#| fig-cap: Scatterplots between rating and four explanatory variables.
#| fig-align: center
#| fig-height: 5
#| message: false
s1 <- ggplot(data=imdb_data, aes(x = year, y = rating, color = rate))+
geom_point(size=0.5)+
labs(x = "Year", y = "Rating")+
theme_bw()
s2 <- ggplot(data=imdb_data, aes(x = length, y = rating, color = rate))+
geom_point(size=0.5)+
labs(x = "Length", y = "Rating")+
theme_bw()
s3 <- ggplot(data=imdb_data, aes(x = budget, y = rating, color = rate))+
geom_point(size=0.5)+
labs(x = "Budget", y = "Rating")+
theme_bw()
s4 <- ggplot(data=imdb_data, aes(x = log_votes , y = rating, color = rate))+
geom_point(size=0.5)+
labs(x = "Votes(log)", y = "Rating")+
theme_bw()
ggarrange(s1,s2,s3,s4,ncol = 2, nrow=2, common.legend = T, legend = "bottom")
#| label: fig-boxplot-ratings
#| fig-cap: Boxplot of ratings by genre.
#| fig-align: center
#| fig-width: 6
#| message: false
ggplot(data =imdb_data, mapping = aes(x = genre, y = rating)) +
geom_boxplot(fill="skyblue")+
labs(x = "Genre", y = "Rating")+
theme_bw()
#| label: fig-boxplot-length
#| fig-cap: Boxplot of length by rating.
#| fig-width: 4
#| fig-align: center
#| message: false
#boxplot
ggplot(data = imdb_data, aes(x = rate, y = length,fill=rate) )+
geom_boxplot() +
theme_bw()+
labs(x = "Rating", y = "Length")+
theme(legend.position = "none")
length_outliers <- imdb_data %>%
group_by(rate) %>%
mutate(is_outlier = length > quantile(length, 0.75) + 1.5 * IQR(length) |
length < quantile(length, 0.25) - 1.5 * IQR(length)) %>%
filter(is_outlier) %>%
ungroup() # 97 outliers
#| label: tbl-summary-length
#| tbl-cap: Summary statistics on length by rating.
table=imdb_data %>%
group_by(rate) %>%
summarise('Mean' = mean(length),
'Median' = median(length),
'St.Dev' = sd(length),
'Min' = min(length),
'Max' = max(length),
'IQR' = quantile(length,0.75)-quantile(length,0.25),
'Sample_size' = n())
table|>
gt() |>
fmt_number(decimals=2) |>
cols_label(
rate=html("rate"),
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
#| label: fig-boxplot-budget
#| fig-cap: Boxplot of budget by rating.
#| fig-width: 4
#| fig-align: center
#| message: false
#boxplot
ggplot(data = imdb_data, aes(x = rate, y = budget,fill=rate) )+
geom_boxplot() +
labs(x="Rating", y = "Budget")+
theme_bw()+
theme(legend.position = "none")
budget_outliers <- imdb_data %>%
group_by(rate) %>%
mutate(is_outlier = budget > quantile(budget, 0.75) + 1.5 * IQR(budget) |
budget < quantile(budget, 0.25) - 1.5 * IQR(budget)) %>%
filter(is_outlier) %>%
ungroup() #9 outliers
#| label: tbl-summary-budget
#| tbl-cap: Summary statistics on budget by rating.
table=imdb_data %>%
group_by(rate) %>%
summarise('Mean' = mean(budget),
'Median' = median(budget),
'St.Dev' = sd(budget),
'Min' = min(budget),
'Max' = max(budget),
'IQR' = quantile(budget,0.75)-quantile(budget,0.25),
'Sample_size' = n())
table|>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
#| label: fig-boxplot-logvotes
#| fig-cap: Boxplot of log_votes by rating.
#| fig-width: 4
#| fig-align: center
#| message: false
ggplot(data = imdb_data, aes(x = rate, y = log_votes,fill=rate) )+
geom_boxplot() +
labs(x = "Rating", y = "Votes(log)")+
theme_bw()+
theme(legend.position = "none")
log_votes_outliers <- imdb_data %>%
group_by(rate) %>%
mutate(is_outlier = log_votes > quantile(log_votes, 0.75) + 1.5 * IQR(log_votes) |
log_votes < quantile(log_votes, 0.25) - 1.5 * IQR(log_votes)) %>%
filter(is_outlier) %>%
ungroup()
#| label: tbl-summary-logvotes
#| tbl-cap: Summary statistics of votes(log) by rating.
table=imdb_data %>%
group_by(rate) %>%
summarise('Mean' = mean(log_votes),
'Median' = median(log_votes),
'St.Dev' = sd(log_votes),
'Min' = min(log_votes),
'Max' = max(log_votes),
'IQR' = quantile(log_votes,0.75)-quantile(log_votes,0.25),
'Sample_size' = n())
table|>
gt() |>
fmt_number(decimals=2) |>
cols_label(
Mean = html("Mean"),
Median = html("Median"),
St.Dev = html("Std. Dev"),
Min = html("Minimum"),
Max = html("Maximum"),
IQR = html("Interquartile Range"),
Sample_size = html("Sample Size")
)
library(janitor)
data_1=imdb_data %>%
group_by(genre)%>%
count()
colnames(data_1)=c("genre","genre_sum_count")
genre_form=imdb_data %>%
tabyl(genre, rate) %>%
adorn_percentages() %>%
adorn_pct_formatting() %>%
adorn_ns()%>%
mutate(genre_sum_count=as.matrix(data_1[2]))
genre_form
#| label: fig-dodgedbarplot-genre
#| fig-cap: Dodged barplot of genre by reating.
#| fig-width: 6
#| fig-align: center
#| message: false
ggplot(imdb_data, aes(x = genre, fill = rate)) +
geom_bar(position = "dodge", stat = "count")+
labs(x = "Genre", y = "Count")+
theme_bw()+
theme(legend.position = "bottom")
#| label: tbl-6
#| tbl-cap: Summary for Saturated Model
saturated_glm_model <- glm(high_rating~ year + length + budget + log_votes + genre,
data = imdb_data, family = binomial(link="logit"))
summary(saturated_glm_model)
saturated_coefficients <- summary(saturated_glm_model)$coefficients
saturated_coefficients_df <- as.data.frame(saturated_coefficients) # Create a data frame
saturated_coefficients_df$row_names <- rownames(saturated_coefficients_df)
saturated_coefficients_table <- saturated_coefficients_df %>%
gt(rowname_col = "row_names") %>%
fmt_number(decimals=3) %>%
tab_header(
title = "Summary for Saturated Model"
)
# Print the table
print(saturated_coefficients_table)
anova(saturated_glm_model)
saturated_glm_model$deviance
View(imdb_data)
anova(saturated_glm_model)
# 2. AIC
aic_values <- AIC(saturated_glm_model, m1_glm_model, m2_glm_model)
m1_glm_model <- glm(high_rating ~ length + budget + log_votes + genre,
data = imdb_data, family = binomial(link="logit"))
m1_coefficients <- summary(m1_glm_model)$coefficients
m1_coefficients_df <- as.data.frame(m1_coefficients) # Create a data frame
m1_coefficients_df$row_names <- rownames(m1_coefficients_df)
m1_coefficients_table <- m1_coefficients_df %>%
gt(rowname_col = "row_names") %>%
fmt_number(decimals=3) %>%
tab_header(
title = "Summary for Model 1"
)
# Print the table
print(m1_coefficients_table)
m1_glm_model <- glm(high_rating ~ year + length + budget  + genre,
data = imdb_data, family = binomial(link="logit"))
m1_coefficients <- summary(m1_glm_model)$coefficients
m1_coefficients_df <- as.data.frame(m1_coefficients) # Create a data frame
m1_coefficients_df$row_names <- rownames(m1_coefficients_df)
m1_coefficients_table <- m1_coefficients_df %>%
gt(rowname_col = "row_names") %>%
fmt_number(decimals=3) %>%
tab_header(
title = "Summary for Model 1"
)
# Print the table
print(m1_coefficients_table)
m2_glm_model <- glm(high_rating ~ length + budget + genre,
data = imdb_data, family = binomial(link="logit"))
summ(m2_glm_model)
saturated_glm_model <- glm(high_rating ~ year + length + budget + log_votes + genre,
data = imdb_data, family = binomial(link = "logit"))
m1_glm_model <- glm(high_rating ~ length + budget + log_votes + genre,
data = imdb_data, family = binomial(link = "logit"))
m2_glm_model <- glm(high_rating ~ length + budget + genre,
data = imdb_data, family = binomial(link = "logit"))
# 1. Likelihood Ratio Chi-Squared Statistic Test
lr_test_m1 <- anova(saturated_glm_model, m1_glm_model, test = "Chisq")
lr_test_m2 <- anova(saturated_glm_model, m2_glm_model, test = "Chisq")
# 2. AIC
aic_values <- AIC(saturated_glm_model, m1_glm_model, m2_glm_model)
# 3. BIC
bic_values <- BIC(saturated_glm_model, m1_glm_model, m2_glm_model)
aic_values
# 3. BIC
bic_values <- BIC(saturated_glm_model, m1_glm_model, m2_glm_model)
bic_values
dres.sat <- resid(saturated_glm_model, type="deviance") # Deviance Residuals
pres.sat <- resid(saturated_glm_model, type="pearson") #Pearson Residuals
pred.sat <- predict(saturated_glm_model, type="response") #Fitted probabilities
d.sat <- data.frame (pred.sat=pred.sat, dres.sat=dres.sat, pres.sat=pres.sat)
g1 <- ggplot(d.sat, aes(x=pred.sat, y=dres.sat))+
geom_point()
g1
dres.m1 <- resid(m1_glm_model, type="deviance") # Deviance Residuals
pres.m1 <- resid(m1_glm_model, type="pearson") #Pearson Residuals
pred.m1 <- predict(m1_glm_model, type="response") #Fitted probabilities
d.m1 <- data.frame (pred.m1=pred.m1, dres.m1=dres.m1, pres.m1=pres.m1)
g2 <- ggplot(d.m1, aes(x=pred.m1, y=dres.m1))+
geom_point()
g2
